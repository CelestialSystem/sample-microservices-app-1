name: Auth API Workflow

on:
  push:
    branches: [ "ci_testing" ]
  pull_request:
    branches: [ "ci_testing" ]
permissions:
  contents: read
  packages: write
  id-token: write
  security-events: write 
jobs:

  build:

    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v3

   # - name: Configure AWS credentials
   #   uses: aws-actions/configure-aws-credentials@v1
   #   with:
    #      aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
     #     aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
      #    aws-region: us-east-1

   # - name: Login to AWS ECR
    #  id: login-ecr
     # uses: aws-actions/amazon-ecr-login@v1
      
    - name: Build the Docker image
      working-directory: auth-api
      run: docker build . --file Dockerfile --tag sample-app-auth-api:${{ github.sha }}
    
   
          
    - name: Run Snyk to check Docker images for vulnerabilities
      uses: snyk/actions/docker@master
      id: docker-image-scan
      env:
        SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
      with:
        image: sample-app-auth-api:${{ github.sha }}
        args: --file=Dockerfile --severity-threshold=high
              
        sarif: false
        
    - name: Debug output
      run: |
        
          echo "######### snyk ################"
          cat snyk.sarif    
    - name: Upload result to GitHub Code Scanning
      uses: github/codeql-action/upload-sarif@v2
      if: always()
      with:
        sarif_file: snyk.sarif
    
    - name: Check docker image scan status
      if: ${{ steps.docker-image-scan.outcome == 'failure' }}
      run: exit 1


    #- name: Build, tag, and push image to Amazon ECR
     # id: build-image
     # env:
      #  ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        #ECR_REPOSITORY: mcs-poc-001
       # IMAGE_TAG: ${GITHUB_SHA}
      #if: ${{ github.ref == 'refs/heads/main' && github.event_name == 'push' }}
    
      #run: |
       # docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
